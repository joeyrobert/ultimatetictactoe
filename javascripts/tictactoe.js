// Generated by CoffeeScript 1.9.0
(function() {
  var UltimateTicTacToe, init, touchHandler,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  UltimateTicTacToe = (function() {
    function UltimateTicTacToe() {
      this.playRandomSquare = __bind(this.playRandomSquare, this);
      this.playRandomGame = __bind(this.playRandomGame, this);
      this.playAgain = __bind(this.playAgain, this);
      this.showWinnerModal = __bind(this.showWinnerModal, this);
      this.showActiveGame = __bind(this.showActiveGame, this);
      this.tictactoe = __bind(this.tictactoe, this);
      this.clickSquare = __bind(this.clickSquare, this);
      this.changeTurn = __bind(this.changeTurn, this);
      this.resize = __bind(this.resize, this);
      this.draw = __bind(this.draw, this);
      this.showModal = __bind(this.showModal, this);
      this.hideModal = __bind(this.hideModal, this);
      this.twoPlayer = __bind(this.twoPlayer, this);
      this.onePlayer = __bind(this.onePlayer, this);
      this.zeroPlayer = __bind(this.zeroPlayer, this);
      this.unbindEvents = __bind(this.unbindEvents, this);
      this.bindEvents = __bind(this.bindEvents, this);
      this.newGameState();
    }

    UltimateTicTacToe.prototype.newGameState = function() {
      var i, j, _base, _i, _j;
      this.board = [];
      this.gameWinners = [];
      for (i = _i = 0; _i < 9; i = ++_i) {
        (_base = this.board)[i] || (_base[i] = []);
        this.gameWinners[i] = void 0;
        for (j = _j = 0; _j < 9; j = ++_j) {
          this.board[i][j] = void 0;
        }
      }
      this.turn = 'x';
      this.movecount = 0;
      this.activeGame = void 0;
      this.gamePaused = true;
      return this.mode = void 0;
    };

    UltimateTicTacToe.prototype.bindEvents = function() {
      $(window).resize(this.resize);
      $('.square').click(this.clickSquare);
      $('#playagain').click(this.playAgain);
      $('#zeroplayer').click(this.zeroPlayer);
      $('#oneplayer').click(this.onePlayer);
      return $('#twoplayer').click(this.twoPlayer);
    };

    UltimateTicTacToe.prototype.unbindEvents = function() {
      $(window).off('resize', this.resize);
      $('.square').off('click', this.clickSquare);
      $('#playagain').off('click', this.playAgain);
      $('#zeroplayer').off('click', this.zeroPlayer);
      $('#oneplayer').off('click', this.onePlayer);
      return $('#twoplayer').off('click', this.twoPlayer);
    };

    UltimateTicTacToe.prototype.zeroPlayer = function() {
      this.mode = 0;
      this.hideModal('intro');
      this.gamePaused = false;
      this.playRandomGame();
      return false;
    };

    UltimateTicTacToe.prototype.onePlayer = function() {
      this.mode = 1;
      this.hideModal('intro');
      this.gamePaused = false;
      return false;
    };

    UltimateTicTacToe.prototype.twoPlayer = function() {
      this.mode = 2;
      this.hideModal('intro');
      this.gamePaused = false;
      return false;
    };

    UltimateTicTacToe.prototype.hideModal = function(cls) {
      $(".mymodal." + cls).css({
        opacity: 0
      });
      return setTimeout((function(_this) {
        return function() {
          return $(".mymodal." + cls).hide();
        };
      })(this), 250);
    };

    UltimateTicTacToe.prototype.showModal = function(cls) {
      $(".mymodal." + cls).css({
        opacity: 0,
        display: 'block'
      });
      return $(".mymodal." + cls).css({
        opacity: 1
      });
    };

    UltimateTicTacToe.prototype.draw = function() {
      var html, template;
      html = "<div id=\"tictactoe\" class=\"x\">\n  <% for(var i = 0; i < 9; i++) { %>\n    <div class=\"game <%-['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'][i] %>\">\n      <% for(var j = 0; j < 9; j++) { %>\n        <div data-i=\"<%-i %>\" data-j=\"<%-j %>\" class=\"square <%-['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'][j] %><% if(board[i][j]) { %> <%-board[i][j] %><% } %>\"></div>\n      <% } %>\n      <div class=\"winner\"></div>\n    </div>\n  <% } %>\n  <div class=\"overallwinner mymodal\">\n    <span class=\"turn\"></span>\n    <a href=\"#\" id=\"playagain\">Play again?</a>\n  </div>\n  <div class=\"intro mymodal\">\n    <h3>New Game</h3>\n    <a href=\"#\" id=\"zeroplayer\" class=\"btn\">0 players</a>\n    <a href=\"#\" id=\"oneplayer\" class=\"btn\">1 player</a>\n    <a href=\"#\" id=\"twoplayer\" class=\"btn\">2 players</a>\n  </div>\n</div>";
      template = _.template(html);
      this.$container = $('#tictactoecontainer');
      return this.$container.html(template({
        board: this.board
      }));
    };

    UltimateTicTacToe.prototype.resize = function() {
      var containerHeight, containerWidth, windowHeight, windowWidth;
      windowWidth = $(window).width();
      windowHeight = $(window).height();
      containerWidth = this.$container.width();
      containerHeight = this.$container.height();
      this.scale = Math.min(containerWidth / 450, containerHeight / 450);
      return $('#tictactoe').css({
        transform: "scale(" + this.scale + ")"
      });
    };

    UltimateTicTacToe.prototype.changeTurn = function() {
      $('#tictactoe').removeClass(this.turn);
      if (this.turn === 'x') {
        this.turn = 'o';
      } else {
        this.turn = 'x';
      }
      return $('#tictactoe').addClass(this.turn);
    };

    UltimateTicTacToe.prototype.clickSquare = function(e) {
      var $square, i, j;
      $square = $(e.currentTarget);
      i = $square.data('i');
      j = $square.data('j');
      return this.tictactoe(i, j);
    };

    UltimateTicTacToe.prototype.tictactoe = function(i, j) {
      var $square;
      if ((this.mode != null) && !this.gamePaused && _.isUndefined(this.board[i][j]) && (i === this.activeGame || _.isUndefined(this.activeGame))) {
        $square = $(".square[data-i=" + i + "][data-j=" + j + "]");
        this.board[i][j] = this.turn;
        $square.addClass(this.turn);
        if (this.turn === 'x') {
          $square.html('&#215;');
        } else {
          $square.html('&#9675;');
        }
        this.movecount += 1;
        this.showWinners(this.turn, i);
        if (!this.gamePaused) {
          this.activeGame = j;
          if (this.gameFull(this.board[j])) {
            this.activeGame = void 0;
          }
          this.showActiveGame();
          this.changeTurn();
        }
        if (this.mode === 1 && this.turn === 'o') {
          return this.playRandomSquare();
        }
      }
    };

    UltimateTicTacToe.prototype.letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];

    UltimateTicTacToe.prototype.showActiveGame = function() {
      if (this.activeGame != null) {
        $(".game").removeClass('active');
        return $(".game." + this.letters[this.activeGame]).addClass('active');
      } else {
        return $(".game").addClass('active');
      }
    };

    UltimateTicTacToe.prototype.gameFull = function(board) {
      var j, _i;
      for (j = _i = 0; _i < 9; j = ++_i) {
        if (_.isUndefined(board[j])) {
          return false;
        }
      }
      return true;
    };

    UltimateTicTacToe.prototype.showWinners = function(turn, i) {
      var $game, j, overallWinners, winner, winners, _i, _j, _len, _len1;
      winners = this.findWinners(this.board[i], turn);
      for (_i = 0, _len = winners.length; _i < _len; _i++) {
        winner = winners[_i];
        for (_j = 0, _len1 = winner.length; _j < _len1; _j++) {
          j = winner[_j];
          $(".game." + this.letters[i] + " .square." + this.letters[j]).addClass('won');
        }
      }
      if (winners.length > 0 && _.isUndefined(this.gameWinners[i])) {
        this.gameWinners[i] = turn;
        $game = $(".game." + this.letters[i]);
        $game.addClass("won").addClass(turn);
        if (turn === 'x') {
          $game.find('.winner').html('&#215;');
        } else {
          $game.find('.winner').html('&#9675;');
        }
      }
      overallWinners = this.findWinners(this.gameWinners, turn);
      if (this.movecount >= 9 * 9 && overallWinners.length === 0) {
        $(".game").removeClass('active');
        this.gamePaused = true;
        this.showWinnerModal();
        if (this.gameInterval != null) {
          return clearInterval(this.gameInterval);
        }
      } else if (overallWinners.length > 0) {
        $(".game").removeClass('active');
        this.gamePaused = true;
        this.showWinnerModal(turn);
        if (this.gameInterval != null) {
          return clearInterval(this.gameInterval);
        }
      }
    };

    UltimateTicTacToe.prototype.showWinnerModal = function(turn) {
      if (turn === 'x') {
        $('.overallwinner .turn').html('&#215; won.');
      } else if (turn === 'o') {
        $('.overallwinner .turn').html('&#9675; won.');
      } else {
        $('.overallwinner .turn').html('A tie!');
      }
      $('.overallwinner').removeClass('x');
      $('.overallwinner').removeClass('o');
      if (turn != null) {
        $('.overallwinner').addClass(turn);
      }
      $('.overallwinner').css({
        opacity: 0,
        display: 'block'
      });
      $('.overallwinner').css({
        opacity: 1
      });
      return $('.winner').css({
        opacity: 1
      });
    };

    UltimateTicTacToe.prototype.findWinners = function(board, turn) {
      var column, row, winners, _i, _j;
      winners = [];
      if (board[0] === turn && board[4] === turn && board[8] === turn) {
        winners.push([0, 4, 8]);
      }
      if (board[2] === turn && board[4] === turn && board[6] === turn) {
        winners.push([0, 2, 4]);
      }
      for (row = _i = 0; _i < 3; row = ++_i) {
        if (board[row * 3] === turn && board[row * 3 + 1] === turn && board[row * 3 + 2] === turn) {
          winners.push([row * 3, row * 3 + 1, row * 3 + 2]);
        }
      }
      for (column = _j = 0; _j < 3; column = ++_j) {
        if (board[column] === turn && board[column + 3] === turn && board[column + 6] === turn) {
          winners.push([column, column + 3, column + 6]);
        }
      }
      return winners;
    };

    UltimateTicTacToe.prototype.playAgain = function() {
      this.newGameState();
      this.draw();
      this.showActiveGame();
      this.resize();
      this.bindEvents();
      return false;
    };

    UltimateTicTacToe.prototype.playRandomGame = function(forever) {
      if (forever == null) {
        forever = false;
      }
      return this.gameInterval = setInterval((function(_this) {
        return function() {
          _this.playRandomSquare();
          if (forever) {
            return $('#playagain:visible').click();
          }
        };
      })(this), 100);
    };

    UltimateTicTacToe.prototype.playRandomSquare = function() {
      var $squares, randInt;
      $squares = $('.game.active .square:not(.x):not(.o)');
      randInt = Math.floor(Math.random() * $squares.length);
      return $squares.eq(randInt).click();
    };

    return UltimateTicTacToe;

  })();

  touchHandler = function(event) {
    var simulatedEvent, touch;
    touch = event.changedTouches[0];
    simulatedEvent = document.createEvent("MouseEvent");
    simulatedEvent.initMouseEvent({
      touchstart: "click",
      touchmove: "mousemove",
      touchend: "mouseup"
    }[event.type], true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
    touch.target.dispatchEvent(simulatedEvent);
    return event.preventDefault();
  };

  init = function() {
    return document.addEventListener("touchstart", touchHandler, true);
  };

  $(document).ready(function() {
    var tictactoe;
    tictactoe = new UltimateTicTacToe();
    init();
    tictactoe.draw();
    tictactoe.showActiveGame();
    tictactoe.resize();
    return tictactoe.bindEvents();
  });

}).call(this);
